# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python
# https://docs.microsoft.com/en-us/azure/devops/pipelines/process/conditions?view=azure-devops&tabs=yaml
# https://elanderson.net/2020/05/azure-devops-pipelines-depends-on-with-conditionals-in-yaml/
# https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&tabs=yaml
name: $(build.sourceBranchName)-$(Date:yyyyMMdd)$(Rev:.r)

trigger:
  branches:
    include: 
    - development
    - releases/*
    - hf/*
  paths:
    exclude: 
    # Exclude README.md from triggering content deployments
    - README.md
    # Include tags for CI
  tags:
    include:
    - '*'

# PR for the below target branches triggers linting and 
pr:
  branches:
    include:
    - develop
    - releases/*
    - hf/*

variables:
  isdevelop: $[contains(variables['Build.SourceBranch'], 'develop')]
  ishotfix: $[contains(variables['Build.SourceBranch'], 'hotfix/')]
  isanyrelease: $[contains(variables['Build.SourceBranch'], 'releases/')]
  isanytag: $[contains(variables['Build.SourceBranch'], 'tag')]
  isanypr: $[contains(variables['Build.SourceBranch'], 'merge')]
  isreleasealpha: $[and(contains(variables['build.sourceBranch'], 'refs/heads'), contains(variables['build.sourceBranch'], '-alpha'))]
  isreleasebeta: $[and(contains(variables['build.sourceBranch'], 'refs/heads'), contains(variables['build.sourceBranch'], '-beta'))]
  isreleaserc: $[and(contains(variables['build.sourceBranch'], 'refs/heads'), contains(variables['build.sourceBranch'], '-rc'))]
  istagalpha: $[and(contains(variables['build.sourceBranch'], 'refs/tags'), contains(variables['build.sourceBranch'], '-alpha'))]
  istagbeta: $[and(contains(variables['build.sourceBranch'], 'refs/tags'), contains(variables['build.sourceBranch'], '-beta'))]
  istagrc: $[and(contains(variables['build.sourceBranch'], 'refs/tags'), contains(variables['build.sourceBranch'], '-rc'))]
  isprtargetdevelop: $[and(contains(variables['build.sourceBranch'], 'merge'), contains(variables['System.PullRequest.TargetBranch'], 'develop'))]
  isprtargethotfix: $[and(contains(variables['build.sourceBranch'], 'merge'), contains(variables['System.PullRequest.TargetBranch'], 'hotfixes/'))]
  isprtargetrelalpha: $[and(contains(variables['build.sourceBranch'], 'merge'), contains(variables['System.PullRequest.TargetBranch'], '-alpha'))]
  isprtargetrelbeta: $[and(contains(variables['build.sourceBranch'], 'merge'), contains(variables['System.PullRequest.TargetBranch'], '-beta'))]
  isprtargetrelrc: $[and(contains(variables['build.sourceBranch'], 'merge'), contains(variables['System.PullRequest.TargetBranch'], '-rc'))]
  
  
pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: BuildAndDeploy

  jobs:
  - job: RunLint
    displayName: Run Lint - QC Checks
    condition: and(succeeded(), or(eq(variables['isanypr'], true),eq(variables['isanytag'], true))) 
    steps:
         - script: echo Run Lint - QC Checks
  - job: PublishPipelineArtifact
    displayName: Git pull and make files available to pipeline process
    # PublishPipelineArtifact task packages source code and makes it available at $(System.ArtifactsDirectory)/product-pipeline-artifact
    # Checkout set to none for all jobs afer this
    steps:
       - task: CopyFiles@2
         inputs:
           SourceFolder: '$(Build.SourcesDirectory)'
           contents: |
             src/**
             test/**
             requirements.txt
           targetFolder: $(Build.ArtifactStagingDirectory)
       - task: PublishPipelineArtifact@1
         inputs:
           path: $(Build.ArtifactStagingDirectory)
           artifact: product-pipeline-artifact
  - job: BuildDocs
    displayName: Build Docs
    dependsOn: PublishPipelineArtifact
    condition: and(succeeded(), or(eq(variables['isanypr'], true),eq(variables['isanytag'], true),
                   eq(variables['isanyrelease'], true),eq(variables['isdevelop'], true))) 
    steps:
      - checkout: none
      - script: echo Build Docs

  - job: BuildCondaEnv
    displayName: Build Conda Env
    dependsOn: PublishPipelineArtifact
    condition: and(succeeded(), or(eq(variables['isanypr'], true),eq(variables['isanytag'], true),
                   eq(variables['isanyrelease'], true),eq(variables['isdevelop'], true))) 
    steps:
      - checkout: none
      - script: echo Build Conda Env

  - job: BuildTestsZip
    displayName: Build Tests Zip
    dependsOn: PublishPipelineArtifact
    condition: and(succeeded(), or(eq(variables['isanytag'], true),eq(variables['isanyrelease'], true),eq(variables['ishotfix'], true),
                  eq(variables['isprtargetrelalpha'], true),eq(variables['isprtargetrelbeta'], true),eq(variables['isprtargetrelrc'], true),
                  eq(variables['isprtargethotfix'], true))) 
    steps:
      - checkout: none
      - script: echo Build Tests Zip

  - job: BuildDistribution
    displayName: Build Distribution
    dependsOn: PublishPipelineArtifact
    condition: and(succeeded(), or(eq(variables['isanytag'], true),eq(variables['isanyrelease'], true),eq(variables['ishotfix'], true),
                  eq(variables['isprtargetrelalpha'], true),eq(variables['isprtargetrelbeta'], true),eq(variables['isprtargetrelrc'], true),
                  eq(variables['isprtargethotfix'], true))) 
    steps:
      - checkout: none
      - script: echo Build Distribution

  - job: BuildDockerImages
    displayName: Build Docker Images
    dependsOn: PublishPipelineArtifact
    condition: and(succeeded(), or(eq(variables['isanytag'], true),eq(variables['isanyrelease'], true),eq(variables['ishotfix'], true),
                  eq(variables['isprtargetrelalpha'], true),eq(variables['isprtargetrelbeta'], true),eq(variables['isprtargetrelrc'], true),
                  eq(variables['isprtargethotfix'], true))) 
    steps:
      - checkout: none
      - script: Build Docker Images

  - job: RunUnitTest
    displayName: Run Unit Tests
    condition: and(succeeded(), or(eq(variables['isanytag'], true),eq(variables['isanyrelease'], true),eq(variables['ishotfix'], true),
                  eq(variables['isprtargetrelalpha'], true),eq(variables['isprtargetrelbeta'], true),eq(variables['isprtargetrelrc'], true),
                  eq(variables['isprtargethotfix'], true))) 
    steps:
      - checkout: none
      - script: echo Run Unit Tests
      
  - job: RunPipeLine
    displayName: Run Pipeline
    steps:
      - checkout: none
      - script: echo Run Pipeline
  - job: RunFunctionalTest
    displayName: Run Functional Tests
    steps:
      - checkout: none
      - script: echo Run Functional Tests
  - job: DeliverDockerImage
    displayName: Deliver Docker Image
    steps:
      - checkout: none
      - script: echo Deliver Docker Image  
  - job: BuildProjectSite
    displayName: Build Project Site
    steps:
      - checkout: none
      - script: echo Build Project Site



