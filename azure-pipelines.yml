# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python
#https://docs.microsoft.com/en-us/azure/devops/pipelines/process/conditions?view=azure-devops&tabs=yaml

name: $(build.sourceBranchName)-$(Date:yyyyMMdd)$(Rev:.r)

trigger:
  branches:
    include: 
    - develop
    - release*alpha
    - release*beta
    - release*rc
  paths:
    exclude: 
    # Exclude README.md from triggering content deployments
    - README.md

# no PR builds
pr: none

resources:
- repo: self

variables:
  isdevelop: $[eq(variables['Build.SourceBranch'], 'refs/heads/develop')]
  isreleasealpha: $[contains(variables['Build.SourceBranch'], 'alpha')]
  isreleasebeta: $[contains(variables['Build.SourceBranch'], 'beta')]
  isreleaserc: $[contains(variables['Build.SourceBranch'], 'rc')]
  
  
pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: CICD
  jobs:
  - job: GitPull
    steps:
      - script: echo $(isdevelop),$(isreleasealpha),$(isreleasebeta)
  - job: BuildPackage
    condition: and(succeeded(), eq(variables['isdevelop'], true))
    steps:
      - script: echo Hello Stage A!
  - job: build
    condition: and(succeeded(), eq(variables['isdevelop'], true))
    steps:
    - script: echo Hello Stage A!
  - job: GitPull
    steps:
      - script: echo $(isdevelop),$(isreleasealpha),$(isreleasebeta)
  - job: build
    condition: and(succeeded(), eq(variables['isdevelop'], true))
    steps:
      - script: echo Hello Stage A!
  - job: build
    condition: and(succeeded(), eq(variables['isdevelop'], true))
    steps:
    - script: echo Hello Stage A!
